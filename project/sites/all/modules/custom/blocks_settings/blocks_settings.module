<?php

function blocks_settings_block_view_alter(&$data, $block) {
  //dsm($block->delta);
}

function blocks_settings_form_alter(&$form, &$form_state, $form_id) {
  //dsm($form_id);
  if ($form_id == 'blocks_settings_register_team_form') {
    global $user;
    $user_team = db_select('field_data_field_team', 'team')  
    ->fields('team', array('field_team_value'))
    ->condition('team.entity_id', $user->uid)
    ->execute()
    ->fetchField();
    if (!empty($user_team)) {
      hide($form);
    }
  }
  if ($form_id == 'blocks_settings_tournament_enter_form') {
    //dsm($form);
    $form['#submit'][] = 'blocks_settings_tournament_enter';
  }
}

function blocks_settings_tournament_enter($form, &$form_state) {
  dpm($form_state);
}

/*
 * Implement hook_block_info(). 
 */
function blocks_settings_block_info() {
  $blocks = array();
  $blocks['register_team'] = array (
    'info' => t('Register team block'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['tournament_enter'] = array (
    'info' => t('Tournament enter'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/*
 * Implement hook_block_view(). 
 */
function blocks_settings_block_view($delta = '') {
  $block = array();
  switch ($delta) {    
    /*Register team*/
    case 'register_team':
      $block['subject'] = '';
      $block['content'] = blocks_settings_register_team_form_callback();
    break;
    /*Tournament enter*/
    case 'tournament_enter':
      $block['subject'] = '';
      $block['content'] = blocks_settings_tournament_enter_form_callback();
    break;
  }
  return $block;
}

function blocks_settings_register_team_form($form, &$form_state) {
  $form['#prefix'] = '<div id="register-team-form">';
  $form['#suffix'] = '</div>';
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Зарегистрироваться'),
    '#attributes' => array(
      'class' => array('reg-team'),
    ),
    '#submit' => array('blocks_settings_register_team_form_submit'),
    '#ajax' => array(
      'callback' => 'blocks_settings_ajax_register_team_form_callback',
      'wrapper' => 'register-team-form',
      'effect' => 'fade',
      'progress' => array('type' => 'none'),
    ),
  );
  return $form;
}

function blocks_settings_tournament_enter_form($form, &$form_state) {
  $form['#prefix'] = '<div id="tournament-enter-form">';
  $form['#suffix'] = '</div>';
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Принять участие'),
    '#attributes' => array(
      'class' => array('tournament-enter'),
    ),
    '#submit' => array('blocks_settings_tournament_enter_form_submit'),
    '#ajax' => array(
      'callback' => 'blocks_settings_ajax_tournament_enter_form_callback',
      'wrapper' => 'tournament-enterm-form',
      'effect' => 'fade',
      'progress' => array('type' => 'none'),
    ),
  );
  return $form;
}

function blocks_settings_register_team_form_callback() {
  $form = drupal_get_form('blocks_settings_register_team_form');
  $form = drupal_render($form);
  return $form;
}

function blocks_settings_tournament_enter_form_callback() {
  $form = drupal_get_form('blocks_settings_tournament_enter_form');
  $form = drupal_render($form);
  return $form;
}

/**
 * Ajax callback for tester_form.
 */
function blocks_settings_ajax_register_team_form_callback($form, &$form_state) {
  $status = $form_state['status'];
  if ($status == STATUS_STOPPED) {
    return '<p>The test was stopped by User</p>';
  }
  else {
    return '<p>Test has been finished already!</p>';
  }
}

function blocks_settings_ajax_tournament_enter_form_callback($form, &$form_state) {
  $status = $form_state['status'];
  if ($status == STATUS_STOPPED) {
    return '<p>The test was stopped by User</p>';
  }
  else {
    return '<p>Test has been finished already!</p>';
  }
}

/**
 * Submit for tester_form.
 */
function tester_build_stop_form_submit($form, &$form_state) {
}